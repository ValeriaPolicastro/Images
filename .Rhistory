MeanRandom<-read.table(file="EdgeBetweenness/MeanRandom.txt")
plot1 <- plotRobin(graph=graph, model1=Mean, model2=MeanRandom,
legend=c("real data", "null model"), measure="vi",title="EdgeBetweenness") + theme(legend.position = "none")+
ggplot2::scale_y_continuous(limits=c(0,0.6))+
ggplot2::theme(text = element_text(size=7),
axis.title.x = element_text(size = 5),
axis.title.y = element_text(size = 5),
)
Mean<-read.table(file="Louvain/Mean.txt")
MeanRandom<-read.table(file="Louvain/MeanRandom.txt")
plot2 <- plotRobin(graph=graph, model1=Mean, model2=MeanRandom,
legend=c("real data", "null model"), measure="vi",title="Louvain") + theme(legend.position = "none")+
ggplot2::scale_y_continuous(limits=c(0,0.6))+
ggplot2::theme(text = element_text(size=7),
axis.title.x = element_text(size = 5),
axis.title.y = element_text(size = 5))
Mean<-read.table(file="Spinglass/Mean.txt")
MeanRandom<-read.table(file="Spinglass/MeanRandom.txt")
plot3 <- plotRobin(graph=graph, model1=Mean, model2=MeanRandom,
legend=c("real data", "null model"), measure="vi",title="Spinglass") + theme(legend.position = "none")+ggplot2::scale_y_continuous(limits=c(0,0.6))+
ggplot2::theme(text = element_text(size=7),
axis.title.x = element_text(size = 5),
axis.title.y = element_text(size = 5))
Mean<-read.table(file="LeadingEigen/Mean.txt")
MeanRandom<-read.table(file="LeadingEigen/MeanRandom.txt")
plot4 <- plotRobin(graph=graph, model1=Mean, model2=MeanRandom,
legend=c("real data", "null model"), measure="vi",title="LeadingEigen") + theme(legend.position = "none")+ggplot2::scale_y_continuous(limits=c(0,0.6))+
ggplot2::theme(text = element_text(size=7),
axis.title.x = element_text(size = 5),
axis.title.y = element_text(size = 5))
Mean<-read.table(file="Walktrap/Mean.txt")
MeanRandom<-read.table(file="Walktrap/MeanRandom.txt")
plot5 <- plotRobin(graph=graph, model1=Mean, model2=MeanRandom,
legend=c("real data", "null model"), measure="vi", title="Walktrap") + theme(legend.position = "none")+ggplot2::scale_y_continuous(limits=c(0,0.6))+
ggplot2::theme(text = element_text(size=7),
axis.title.x = element_text(size = 5),
axis.title.y = element_text(size = 5))
Mean<-read.table(file="Infomap/Mean.txt")
MeanRandom<-read.table(file="Infomap/MeanRandom.txt")
plot6 <- plotRobin(graph=graph, model1=Mean, model2=MeanRandom,
legend=c("real data", "null model"), measure="vi",title="Infomap") +theme(legend.position = c(0.2, 0.65))+ ggplot2::scale_y_continuous(limits=c(0,0.6))+
ggplot2::theme(text = element_text(size=7),
axis.title.x = element_text(size = 5),
axis.title.y = element_text(size = 5),
legend.text =element_text(size = 5),
legend.title =element_text(size = 5))
Mean<-read.table(file="LabelProp/Mean.txt")
MeanRandom<-read.table(file="LabelProp/MeanRandom.txt")
plot7 <- plotRobin(graph=graph, model1=Mean, model2=MeanRandom,
legend=c("real data", "null model"), measure="vi",title="LabelProp") + theme(legend.position = "none")+ggplot2::scale_y_continuous(limits=c(0,0.6))+
ggplot2::theme(text = element_text(size=7),
axis.title.x = element_text(size = 5),
axis.title.y = element_text(size = 5))
Mean<-read.table(file="Fastgreedy/Mean.txt")
MeanRandom<-read.table(file="Fastgreedy/MeanRandom.txt")
plot8 <- plotRobin(graph=graph, model1=Mean, model2=MeanRandom,
legend=c("real data", "null model"), measure="vi",title="Fastgreedy") +theme(legend.position = "none")+ ggplot2::scale_y_continuous(limits=c(0,0.6))+
ggplot2::theme(text = element_text(size=7),
axis.title.x = element_text(size = 5),
axis.title.y = element_text(size = 5))
PlotConfigurationModel<-gridExtra::grid.arrange(plot6,plot7,plot3,plot4,plot5,plot1,plot2,plot8, nrow=4)
ggsave("PlotConfigurationModel.jpeg",plot=PlotConfigurationModel,dpi=300)
#### DK model
library(ggplot2)
my_network <- system.file("example/football.gml", package="robin")
graph <- prepGraph(file=my_network, file.format="gml")
Mean<-read.table(file="EdgeBetweenness/DkMean.txt")
MeanRandom<-read.table(file="EdgeBetweenness/DkMeanRandom.txt")
plot1 <- plotRobin(graph=graph, model1=Mean, model2=MeanRandom,
legend=c("real data", "null model"), measure="vi",title="EdgeBetweenness") +theme(legend.position = "none")+
ggplot2::scale_y_continuous(limits=c(0,0.6))+
ggplot2::theme(text = element_text(size=7),
axis.title.x = element_text(size = 5),
axis.title.y = element_text(size = 5))
Mean<-read.table(file="Louvain/DkMean.txt")
MeanRandom<-read.table(file="Louvain/DkMeanRandom.txt")
plot2 <- plotRobin(graph=graph, model1=Mean, model2=MeanRandom,
legend=c("real data", "null model"), measure="vi",title="Louvain") + theme(legend.position = "none")+ggplot2::scale_y_continuous(limits=c(0,0.6))+
ggplot2::theme(text = element_text(size=7),
axis.title.x = element_text(size = 5),
axis.title.y = element_text(size = 5))
Mean<-read.table(file="Spinglass/DkMean.txt")
MeanRandom<-read.table(file="Spinglass/DkMeanRandom.txt")
plot3 <- plotRobin(graph=graph, model1=Mean, model2=MeanRandom,
legend=c("real data", "null model"), measure="vi",title="Spinglass") +theme(legend.position = "none")+ ggplot2::scale_y_continuous(limits=c(0,0.6))+
ggplot2::theme(text = element_text(size=7),
axis.title.x = element_text(size = 5),
axis.title.y = element_text(size = 5))
Mean<-read.table(file="LeadingEigen/DkMean.txt")
MeanRandom<-read.table(file="LeadingEigen/DkMeanRandom.txt")
plot4 <- plotRobin(graph=graph, model1=Mean, model2=MeanRandom,
legend=c("real data", "null model"), measure="vi",title="LeadingEigen") + theme(legend.position = "none")+ggplot2::scale_y_continuous(limits=c(0,0.6))+
ggplot2::theme(text = element_text(size=7),
axis.title.x = element_text(size = 5),
axis.title.y = element_text(size = 5))
Mean<-read.table(file="Walktrap/DkMean.txt")
MeanRandom<-read.table(file="Walktrap/DkMeanRandom.txt")
plot5 <- plotRobin(graph=graph, model1=Mean, model2=MeanRandom,
legend=c("real data", "null model"), measure="vi", title="Walktrap") + theme(legend.position = "none")+ggplot2::scale_y_continuous(limits=c(0,0.6))+
ggplot2::theme(text = element_text(size=7),
axis.title.x = element_text(size = 5),
axis.title.y = element_text(size = 5))
Mean<-read.table(file="Infomap/DkMean.txt")
MeanRandom<-read.table(file="Infomap/DkMeanRandom.txt")
plot6 <- plotRobin(graph=graph, model1=Mean, model2=MeanRandom,
legend=c("real data", "null model"), measure="vi",title="Infomap") +theme(legend.position = c(0.2, 0.65))+ ggplot2::scale_y_continuous(limits=c(0,0.6))+
ggplot2::theme(text = element_text(size=7),
axis.title.x = element_text(size = 5),
axis.title.y = element_text(size = 5),
legend.text =element_text(size = 5),
legend.title =element_text(size = 5))
Mean<-read.table(file="LabelProp/DkMean.txt")
MeanRandom<-read.table(file="LabelProp/DkMeanRandom.txt")
plot7 <- plotRobin(graph=graph, model1=Mean, model2=MeanRandom,
legend=c("real data", "null model"), measure="vi",title="LabelProp") + theme(legend.position = "none")+ggplot2::scale_y_continuous(limits=c(0,0.6))+
ggplot2::theme(text = element_text(size=7),
axis.title.x = element_text(size = 5),
axis.title.y = element_text(size = 5))
Mean<-read.table(file="Fastgreedy/DkMean.txt")
MeanRandom<-read.table(file="Fastgreedy/DkMeanRandom.txt")
plot8 <- plotRobin(graph=graph, model1=Mean, model2=MeanRandom,
legend=c("real data", "null model"), measure="vi",title="Fastgreedy") + theme(legend.position = "none")+ggplot2::scale_y_continuous(limits=c(0,0.6))+
ggplot2::theme(text = element_text(size=7),
axis.title.x = element_text(size = 5),
axis.title.y = element_text(size = 5))
PlotDkModel<-gridExtra::grid.arrange(plot6,plot7,plot3,plot4,plot5,plot1,plot2,plot8, nrow=4)
#Per i paper 300dpi
ggsave("PlotDkModel.jpeg",plot=PlotDkModel,dpi=300)
network <- system.file("example/football.gml", package="robin")
graph <- prepGraph(file=my_network, file.format="gml")
graphRandomCM<- random(graph=graph)
graphRandomDK<- prepGraph(file="dk2.1_footballEdgelist.txt",file.format = "edgelist")
plotGraph <- function(graph)
{
graph_d3 <- networkD3::igraph_to_networkD3(g=graph)
plot <- networkD3::simpleNetwork(graph_d3$links, opacity=0.8, zoom=TRUE,
linkColour = "B1AEAE", nodeColour = "#2E66AC",
fontSize=12)
return(plot)
}
plotGraph(graph)
network <- system.file("example/football.gml", package="robin")
graph <- prepGraph(file=my_network, file.format="gml")
graphRandomCM<- random(graph=graph)
graphRandomDK<- prepGraph(file="dk2.1_footballEdgelist.txt",file.format = "edgelist")
plotGraph <- function(graph)
{
graph_d3 <- networkD3::igraph_to_networkD3(g=graph)
plot <- networkD3::simpleNetwork(graph_d3$links, opacity=0.8, zoom=TRUE,
linkColour = "B1AEAE", nodeColour = "#2E66AC",
fontSize=12)
return(plot)
}
plotGraph(graph)
plotGraph(graphRandomCM)
plotGraph(graphRandomDK)
library(ggplot2)
Mean1<-read.table(file="Fastgreedy/Mean1.txt")
Mean2<-read.table(file="Fastgreedy/Mean2.txt")
plot1<-plotRobin(graph=graph, model1=Mean1, model2=Mean2,
measure="vi", legend = c("infomap", "fastgreedy"), title="Infomap vs FastGreedy") + theme(legend.position =c(0.13,0.7))+
ggplot2::scale_y_continuous(limits=c(0,0.6)) +
ggplot2::theme(text = element_text(size=7),
axis.title.x = element_text(size = 5),
axis.title.y = element_text(size = 5),
legend.text =element_text(size = 5),
legend.title = element_blank(),
rect = element_rect(fill = "transparent"))
#2
Mean1<-read.table(file="Walktrap/Mean1.txt")
Mean2<-read.table(file="Walktrap/Mean2.txt")
cols <- c("model1" = "#00BFC4", "model2" = "#F8766D")
plot2<-plotRobin(graph=graph, model1=Mean1, model2=Mean2, measure="vi", title="Infomap vs Walktrap")+ ggplot2::scale_colour_manual(  values = cols,breaks = c("model1", "model2"), labels = c("infomap", "walktrap")) + theme(legend.position = c(0.13, 0.7))+ggplot2::scale_y_continuous(limits=c(0,0.6))+
ggplot2::theme(text = element_text(size=7),
axis.title.x = element_text(size = 5),
axis.title.y = element_text(size = 5),
legend.text =element_text(size = 5),
legend.title = element_blank(),
rect = element_rect(fill = "transparent"))
#3
Mean1<-read.table(file="LabelProp/Mean1.txt")
Mean2<-read.table(file="LabelProp/Mean2.txt")
cols <- c("model1" = "#00BFC4", "model2" = "#F8766D")
plot3<-plotRobin(graph=graph, model1=Mean1, model2=Mean2, measure="vi", title="Infomap vs LabelProp")+ ggplot2::scale_colour_manual(  values = cols,breaks = c("model1", "model2"), labels = c("infomap", "labelProp"))+ theme(legend.position = c(0.13, 0.7))+ ggplot2::scale_y_continuous(limits=c(0,0.6))+
ggplot2::theme(text = element_text(size=7),
axis.title.x = element_text(size = 5),
axis.title.y = element_text(size = 5),
legend.text =element_text(size = 5),
legend.title = element_blank(),
rect = element_rect(fill = "transparent"))
#4
Mean1<-read.table(file="LeadingEigen/Mean1.txt")
Mean2<-read.table(file="LeadingEigen/Mean2.txt")
plot4<-plotRobin(graph=graph, model1=Mean1, model2=Mean2, measure="vi", title="Infomap vs LeadingEigen") + ggplot2::scale_colour_manual(  values = cols,breaks = c("model1", "model2"), labels = c("infomap", "leadingEigen")) + theme(legend.position = c(0.16,0.7))+ggplot2::scale_y_continuous(limits=c(0,0.6)) +
ggplot2::theme(text = element_text(size=7),
axis.title.x = element_text(size = 5),
axis.title.y = element_text(size = 5),
legend.text =element_text(size = 5),
legend.title = element_blank(),
rect = element_rect(fill = "transparent"))
#5
Mean1<-read.table(file="Louvain/Mean1.txt")
Mean2<-read.table(file="Louvain/Mean2.txt")
plot5<-plotRobin(graph=graph, model1=Mean1, model2=Mean2, measure="vi",
title="Infomap vs Louvain") + ggplot2::scale_colour_manual(  values = cols,breaks = c("model1", "model2"), labels = c("infomap", "louvain")) + ggplot2::scale_y_continuous(limits=c(0,0.6)) + theme(legend.position = c(0.13, 0.7))+
ggplot2::theme(text = element_text(size=7),
axis.title.x = element_text(size = 5),
axis.title.y = element_text(size = 5),
legend.text =element_text(size = 5),
legend.title = element_blank(),
rect = element_rect(fill = "transparent"))
#6
Mean1<-read.table(file="EdgeBetweenness/Mean1.txt")
Mean2<-read.table(file="EdgeBetweenness/Mean2.txt")
plot6<-plotRobin(graph=graph, model1=Mean1, model2=Mean2, measure="vi",
legend=c("infomap", "edgeBetweenness"),title="Infomap vs EdgeBetweenness")+theme(legend.position = c(0.16, 0.7))+
ggplot2::scale_y_continuous(limits=c(0,0.6))+
ggplot2::theme(text = element_text(size=7),
axis.title.x = element_text(size = 5),
axis.title.y = element_text(size = 5),
legend.text =element_text(size = 5),
legend.title = element_blank(),
rect = element_rect(fill = "transparent"))
#7
Mean1<-read.table(file="Spinglass/Mean1.txt")
Mean2<-read.table(file="Spinglass/Mean2.txt")
plot7<- plotRobin(graph=graph, model1=Mean1, model2=Mean2, measure="vi",
title="Infomap vs Spinglass")+theme(legend.position = c(0.13, 0.7))+ ggplot2::scale_colour_manual(  values = cols,breaks = c("model1", "model2"), labels = c("infomap", "spinglass")) + ggplot2::scale_y_continuous(limits=c(0,0.6))+
ggplot2::theme(text = element_text(size=7),
axis.title.x = element_text(size = 5),
axis.title.y = element_text(size = 5),
legend.text =element_text(size = 5),
legend.title = element_blank(),
rect = element_rect(fill = "transparent"))
PlotComparisonTuttiVsInfomap<-gridExtra::grid.arrange(plot7,plot5,plot3,plot2,plot6,plot1,plot4, nrow=4)
ggsave("PlotComparisonTuttiVsInfomap.jpeg",plot=PlotComparisonTuttiVsInfomap,dpi=300)
PlotComparisonTuttiVsInfomap<-gridExtra::grid.arrange(plot7,plot5,plot3,plot2,plot6,plot1,plot4, nrow=4)
PlotComparisonTuttiVsInfomap<-gridExtra::grid.arrange(plot7,plot5,plot3,plot2,plot6,plot1,plot4, nrow=4)
ggsave("PlotComparisonTuttiVsInfomap.jpeg",plot=PlotComparisonTuttiVsInfomap,dpi=300)
PlotComparisonTuttiVsInfomap<-gridExtra::grid.arrange(plot7,plot5,plot3,plot2,plot6,plot1,plot4, nrow=4)
ggsave("PlotComparisonTuttiVsInfomap.jpeg",plot=PlotComparisonTuttiVsInfomap,dpi=300)
PlotComparisonTuttiVsInfomap<-gridExtra::grid.arrange(plot7,plot5,plot3,plot2,plot6,plot1,plot4, nrow=4)
ggsave("PlotComparisonTuttiVsInfomap.jpeg",plot=PlotComparisonTuttiVsInfomap,dpi=300)
PlotComparisonTuttiVsInfomap<-gridExtra::grid.arrange(plot7,plot5,plot3,plot2,plot6,plot1,plot4, nrow=4)
ggsave("PlotComparisonTuttiVsInfomap.jpeg",plot=PlotComparisonTuttiVsInfomap,dpi=300)
setwd("C:/Users/valeria/Dropbox/CNR Tigem/Data integration")
setwd("E:/Dati master")
correlationMeth<-readRDS(file = "correlationMeth450PC1minore2500.rds")
correlationExp<-readRDS(file = "CorrGeneExpression.rds")
quantile(abs(correlationExp), prob=seq(0,1,by=0.001))
soglia <- 5.623520e-01 #superiore al 99.8%
AExp <- abs(correlationExp)
AExp[AExp<soglia] <- 0
diag(AExp) <- 0
AExp[AExp>=soglia]<-1
AExp[1:10,1:10]
dim(AExp)
soglia<-8.909117e-01 #superiore al 99.8%
AMeth <- abs(correlationMeth)
AMeth[AMeth<soglia] <- 0
diag(AMeth) <- 0
AMeth[AMeth>=soglia]<-1
AMeth[1:10,1:10]
dim(AMeth)
AExpSenzaNodiIsolati<-AExp[rowSums(AExp)>0,colSums(AExp)>0]
dim(AExpSenzaNodiIsolati)#8290 8290
AMethSenzaNodiIsolati<-AMeth[rowSums(AMeth)>0,colSums(AMeth)>0]
dim(AMethSenzaNodiIsolati)#2164 2164
library(igraph)
graphMeth<-graph_from_adjacency_matrix(AMethSenzaNodiIsolati, mode = "upper", diag = FALSE)
graphMeth#2164 152387
graphExp<-graph_from_adjacency_matrix(AExpSenzaNodiIsolati, mode = "upper", diag = FALSE)
graphExp#8290
geniUguali<-intersect(row.names(AExpSenzaNodiIsolati),row.names(AMethSenzaNodiIsolati))
length(geniUguali)#1668
ExpU<-AExpSenzaNodiIsolati[geniUguali,geniUguali]
dim(ExpU)
MethU<-AMethSenzaNodiIsolati[geniUguali,geniUguali]
dim(MethU)
graphExpU<-graph_from_adjacency_matrix(ExpU, mode = "upper", diag = FALSE)
graphExpU#1668 7329
graphMethU<-graph_from_adjacency_matrix(MethU, mode = "upper", diag = FALSE)
graphMethU#1668 95253
graphUni<-igraph::union(graphMethU,graphExpU)
graphUni#1668 101852
cLou<-cluster_louvain(graphUni)
cLou
graphUni
library(robin)
graph<-graphUni
graph
library(ggplot2)
setwd("E:/Dati master/NetworkUnionCompleta")
comp_F <- robinCompare(graph=graph, method1="infomap",
method2="fastGreedy", measure="vi", type="independent")
saveRDS(comp_F,file="comp_F2millesimo.rds")
plot1<-plotRobin(graph=graph, model1=comp_F$Mean1, model2=comp_F$Mean2,
measure="vi", legend = c("infomap", "fastgreedy"), title="Infomap vs FastGreedy") +
ggplot2::theme(legend.position =c(0.13,0.7))+
ggplot2::scale_y_continuous(limits=c(0,0.6)) +
ggplot2::theme(text = element_text(size=7),
axis.title.x = element_text(size = 5),
axis.title.y = element_text(size = 5),
legend.text =element_text(size = 5),
legend.title = element_blank(),
rect = element_rect(fill = "transparent"))
#Walktrap
comp_W <- robinCompare(graph=graph, method1="infomap",
method2="walktrap", measure="vi", type="independent")
saveRDS(comp_W,file="comp_W2millesimo.rds")
cols <- c("model1" = "#00BFC4", "model2" = "#F8766D")
plot2<-plotRobin(graph=graph, model1=comp_W$Mean1, model2=comp_W$Mean2, measure="vi", title="Infomap vs Walktrap")+ ggplot2::scale_colour_manual(  values = cols,breaks = c("model1", "model2"), labels = c("infomap", "walktrap")) + theme(legend.position = c(0.13, 0.7))+ggplot2::scale_y_continuous(limits=c(0,0.6))+
ggplot2::theme(text = element_text(size=7),
axis.title.x = element_text(size = 5),
axis.title.y = element_text(size = 5),
legend.text =element_text(size = 5),
legend.title = element_blank(),
rect = element_rect(fill = "transparent"))
#LabelProp
comp_La <- robinCompare(graph=graph, method1="infomap",
method2="labelProp", measure="vi", type="independent")
saveRDS(comp_La,file="comp_La2millesimo.rds")
cols <- c("model1" = "#00BFC4", "model2" = "#F8766D")
plot3<-plotRobin(graph=graph, model1=comp_La$Mean1, model2=comp_La$Mean2, measure="vi", title="Infomap vs LabelProp")+ ggplot2::scale_colour_manual(  values = cols,breaks = c("model1", "model2"), labels = c("infomap", "labelProp"))+ theme(legend.position = c(0.13, 0.7))+ ggplot2::scale_y_continuous(limits=c(0,0.6))+
ggplot2::theme(text = element_text(size=7),
axis.title.x = element_text(size = 5),
axis.title.y = element_text(size = 5),
legend.text =element_text(size = 5),
legend.title = element_blank(),
rect = element_rect(fill = "transparent"))
#LeadingEigen
comp_Le <- robinCompare(graph=graph, method1="infomap",
method2="leadingEigen", measure="vi", type="independent")
saveRDS(comp_Le,file="comp_Le2millesimo.rds")
plot4<-plotRobin(graph=graph, model1=comp_Le$Mean1, model2=comp_Le$Mean2, measure="vi", title="Infomap vs LeadingEigen") + ggplot2::scale_colour_manual(  values = cols,breaks = c("model1", "model2"), labels = c("infomap", "leadingEigen")) + theme(legend.position = c(0.16,0.7))+ggplot2::scale_y_continuous(limits=c(0,0.6)) +
ggplot2::theme(text = element_text(size=7),
axis.title.x = element_text(size = 5),
axis.title.y = element_text(size = 5),
legend.text =element_text(size = 5),
legend.title = element_blank(),
rect = element_rect(fill = "transparent"))
#Louvain
comp_Lo <- robinCompare(graph=graph, method1="infomap",
method2="louvain", measure="vi", type="independent")
saveRDS(comp_Lo,file="comp_Lo2millesimo.rds")
plot5<-plotRobin(graph=graph, model1=comp_Lo$Mean1, model2=comp_Lo$Mean2, measure="vi",
title="Infomap vs Louvain") + ggplot2::scale_colour_manual(  values = cols,breaks = c("model1", "model2"), labels = c("infomap", "louvain")) + ggplot2::scale_y_continuous(limits=c(0,0.6)) + theme(legend.position = c(0.13, 0.7))+
ggplot2::theme(text = element_text(size=7),
axis.title.x = element_text(size = 5),
axis.title.y = element_text(size = 5),
legend.text =element_text(size = 5),
legend.title = element_blank(),
rect = element_rect(fill = "transparent"))
PlotComparisonAllVsInfomap<-gridExtra::grid.arrange(plot1,plot2,plot3,plot4,plot5, nrow=2)
PlotComparisonAllVsInfomap
PlotComparisonAllVsInfomap
##########Con intera network
cluster_label_prop(graphUni)
comps <- cluster_label_prop(graphUni)$membership
comps
colbar <- rainbow(max(comps)+1)
V(graphUni)$color <- colbar[comps+1]
plot(graphUni, layout=layout_with_fr, vertex.size=5, vertex.label=NA)
plot(graphUni, vertex.size=5, vertex.label=NA)
cluster_louvain(graphUni)#IGRAPH clustering label propagation, groups: 31, mod: 0.0053
comps <- cluster_louvain(graphUni)$membership
comps
colbar <- rainbow(max(comps)+1)
V(graphUni)$color <- colbar[comps+1]
plot(graphUni, vertex.size=5, vertex.label=NA)
setwd("E:/Dati master/NetworkMetilazioneGraphCompleta")
setwd("E:/Dati master")
correlationMeth<-readRDS(file = "correlationMeth450PC1minore2500.rds")
setwd("E:/Dati master/NetworkMetilazioneGraphCompleta")
quantile(abs(correlationMeth), prob=seq(0,1,by=0.001))
soglia<-9.038436e-01 #superiore al 99.9%
AMeth <- abs(correlationMeth)
AMeth[AMeth<soglia] <- 0
diag(AMeth) <- 0
AMeth[AMeth>=soglia]<-1
AMeth[1:10,1:10]
dim(AMeth)
AMethSenzaNodiIsolati<-AMeth[rowSums(AMeth)>0,colSums(AMeth)>0]
dim(AMethSenzaNodiIsolati)#1647 1647
library(igraph)
graphMeth<-graph_from_adjacency_matrix(AMethSenzaNodiIsolati, mode = "upper", diag = FALSE)
graphMeth#1647 73044
library(robin)
graph<-graphMeth
graph
library(ggplot2)
comp_F <- robinCompare(graph=graph, method1="infomap",
method2="fastGreedy", measure="vi", type="independent")
saveRDS(comp_F,file="comp_F2millesimo.rds")
plot1<-plotRobin(graph=graph, model1=comp_F$Mean1, model2=comp_F$Mean2,
measure="vi", legend = c("infomap", "fastgreedy"), title="Infomap vs FastGreedy") +
ggplot2::theme(legend.position =c(0.13,0.7))+
ggplot2::scale_y_continuous(limits=c(0,0.6)) +
ggplot2::theme(text = element_text(size=7),
axis.title.x = element_text(size = 5),
axis.title.y = element_text(size = 5),
legend.text =element_text(size = 5),
legend.title = element_blank(),
rect = element_rect(fill = "transparent"))
#Walktrap
comp_W <- robinCompare(graph=graph, method1="infomap",
method2="walktrap", measure="vi", type="independent")
saveRDS(comp_W,file="comp_W2millesimo.rds")
cols <- c("model1" = "#00BFC4", "model2" = "#F8766D")
plot2<-plotRobin(graph=graph, model1=comp_W$Mean1, model2=comp_W$Mean2, measure="vi", title="Infomap vs Walktrap")+ ggplot2::scale_colour_manual(  values = cols,breaks = c("model1", "model2"), labels = c("infomap", "walktrap")) + theme(legend.position = c(0.13, 0.7))+ggplot2::scale_y_continuous(limits=c(0,0.6))+
ggplot2::theme(text = element_text(size=7),
axis.title.x = element_text(size = 5),
axis.title.y = element_text(size = 5),
legend.text =element_text(size = 5),
legend.title = element_blank(),
rect = element_rect(fill = "transparent"))
#LabelProp
comp_La <- robinCompare(graph=graph, method1="infomap",
method2="labelProp", measure="vi", type="independent")
saveRDS(comp_La,file="comp_La2millesimo.rds")
cols <- c("model1" = "#00BFC4", "model2" = "#F8766D")
plot3<-plotRobin(graph=graph, model1=comp_La$Mean1, model2=comp_La$Mean2, measure="vi", title="Infomap vs LabelProp")+ ggplot2::scale_colour_manual(  values = cols,breaks = c("model1", "model2"), labels = c("infomap", "labelProp"))+ theme(legend.position = c(0.13, 0.7))+ ggplot2::scale_y_continuous(limits=c(0,0.6))+
ggplot2::theme(text = element_text(size=7),
axis.title.x = element_text(size = 5),
axis.title.y = element_text(size = 5),
legend.text =element_text(size = 5),
legend.title = element_blank(),
rect = element_rect(fill = "transparent"))
#LeadingEigen
comp_Le <- robinCompare(graph=graph, method1="infomap",
method2="leadingEigen", measure="vi", type="independent")
saveRDS(comp_Le,file="comp_Le2millesimo.rds")
plot4<-plotRobin(graph=graph, model1=comp_Le$Mean1, model2=comp_Le$Mean2, measure="vi", title="Infomap vs LeadingEigen") + ggplot2::scale_colour_manual(  values = cols,breaks = c("model1", "model2"), labels = c("infomap", "leadingEigen")) + theme(legend.position = c(0.16,0.7))+ggplot2::scale_y_continuous(limits=c(0,0.6)) +
ggplot2::theme(text = element_text(size=7),
axis.title.x = element_text(size = 5),
axis.title.y = element_text(size = 5),
legend.text =element_text(size = 5),
legend.title = element_blank(),
rect = element_rect(fill = "transparent"))
#Louvain
comp_Lo <- robinCompare(graph=graph, method1="infomap",
method2="louvain", measure="vi", type="independent")
saveRDS(comp_Lo,file="comp_Lo2millesimo.rds")
plot5<-plotRobin(graph=graph, model1=comp_Lo$Mean1, model2=comp_Lo$Mean2, measure="vi",
title="Infomap vs Louvain") + ggplot2::scale_colour_manual(  values = cols,breaks = c("model1", "model2"), labels = c("infomap", "louvain")) + ggplot2::scale_y_continuous(limits=c(0,0.6)) + theme(legend.position = c(0.13, 0.7))+
ggplot2::theme(text = element_text(size=7),
axis.title.x = element_text(size = 5),
axis.title.y = element_text(size = 5),
legend.text =element_text(size = 5),
legend.title = element_blank(),
rect = element_rect(fill = "transparent"))
graphMeth
Comp<-components(graphMeth)#per entrambi c'è un gruppo più connesso ma anche altri che hanno una 20 di geni
Comp$no#91
Comp$csize#1302    2   27   47   16   16
BigComp<- which.max(Comp$csize)
MainGraph<-induced_subgraph(graphExp,which(Comp$membership == BigComp))
MainGraph#1302 3132
Comp<-components(MainGraph)
Comp$no#91
Comp$csize#1302    2   27   47   16   16
Comp<-components(graphMeth,mode = "strong")#per entrambi c'è un gruppo più connesso ma anche altri che hanno una 20 di geni
Comp$no#91
Comp$csize#1302    2   27   47   16   16
BigComp<- which.max(Comp$csize)
MainGraph<-induced_subgraph(graphExp,which(Comp$membership == BigComp))
MainGraph#1302 3132
Comp<-components(MainGraph,mode = "strong")
Comp$no#91
Comp$csize#1302    2   27   47   16   16
BigComp<- which.max(Comp$csize)
MainGraph<-induced_subgraph(graphExp,which(Comp$membership == BigComp))
MainGraph#1302 3132
Comp<-components(graphMeth,mode = "strong")#per entrambi c'è un gruppo più connesso ma anche altri che hanno una 20 di geni
Comp$no#91
Comp$csize#1302    2   27   47   16   16
BigComp<- which.max(Comp$csize)
MainGraph<-induced_subgraph(graphExp,which(Comp$membership == BigComp))
MainGraph#1302 3132
cLou<-cluster_louvain(MainGraph)
cLou#IGRAPH clustering multi level, groups: 559, mod: 0.73
tail(cLou)
table(cLou$membership)
comps <- cLou$membership
comps
colbar <- rainbow(max(comps)+1)
V(MainGraph)$color <- colbar[comps+1]
plot(MainGraph, vertex.size=5, vertex.label=NA)
Comp<-components(MainGraph,mode = "strong")#per entrambi c'è un gruppo più connesso ma anche altri che hanno una 20 di geni
Comp$no#91
Comp$csize#1302    2   27   47   16   16
BigComp<- which.max(Comp$csize)
MainGraph<-induced_subgraph(graphExp,which(Comp$membership == BigComp))
MainGraph#1302 3132
Comp<-components(MainGraph,mode = "strong")#per entrambi c'è un gruppo più connesso ma anche altri che hanno una 20 di geni
Comp$no#91
Comp$csize#1302    2   27   47   16   16
BigComp<- which.max(Comp$csize)
MainGraph<-induced_subgraph(graphExp,which(Comp$membership == BigComp))
MainGraph#1302 3132
Comp<-components(MainGraph,mode = "strong")#per entrambi c'è un gruppo più connesso ma anche altri che hanno una 20 di geni
Comp$no#91
Comp$csize#1302    2   27   47   16   16
BigComp<- which.max(Comp$csize)
MainGraph<-induced_subgraph(graphExp,which(Comp$membership == BigComp))
MainGraph#
Comp<-components(graphMeth,mode = "strong")#per entrambi c'è un gruppo più connesso ma anche altri che hanno una 20 di geni
Comp$no#91
Comp$csize#1302    2   27   47   16   16
BigComp<- which.max(Comp$csize)
MainGraph<-induced_subgraph(graphExp,which(Comp$membership == BigComp))
MainGraph#1302 3132
